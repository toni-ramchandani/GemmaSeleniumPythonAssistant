# -*- coding: utf-8 -*-
"""Selenium_lora_tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1noJ_MD5i7LA5bY4P-cDFP3okUFZA-TIM

# Setup

# Gemma setup
To complete this tutorial, you'll first need to complete the setup instructions at [Gemma setup](https://colab.research.google.com/corgiredirector?site=https%3A%2F%2Fai.google.dev%2Fgemma%2Fdocs%2Fsetup).
The Gemma setup instructions show you how to do the following:

Get access to Gemma on kaggle.com.
Select a Colab runtime with sufficient resources to run the Gemma 2B model.
Generate and configure a Kaggle username and API key.
After you've completed the Gemma setup, move on to the next section, where you'll set environment variables for your Colab environment.
"""

import os
import pandas as pd

"""# Set environment variables
Set environment variables for KAGGLE_USERNAME and KAGGLE_KEY.
"""

from google.colab import userdata

# Note: `userdata.get` is a Colab API. If you're not using Colab, set the env
# vars as appropriate for your system.

os.environ["KAGGLE_USERNAME"] = userdata.get('KAGGLE_USERNAME')
os.environ["KAGGLE_KEY"] = userdata.get('KAGGLE_KEY')

"""# Install dependencies
Install Keras and KerasNLP.
"""

# Install Keras 3 last. See https://keras.io/getting_started/ for more details.
!pip install -q -U keras-nlp
!pip install -q -U keras>=3

"""# Select a backend
Keras is a high-level, multi-framework deep learning API designed for simplicity and ease of use. Keras 3 lets you choose the backend: TensorFlow, JAX, or PyTorch.
"""

os.environ["KERAS_BACKEND"] = "jax"
os.environ["XLA_PYTHON_CLIENT_MEM_FRACTION"]="1.00"

"""# Import packages
Import Keras and KerasNLP.
"""

import keras
import keras_nlp

"""# Load Dataset"""

!wget -O databricks-dolly-15k.jsonl https://huggingface.co/datasets/databricks/databricks-dolly-15k/resolve/main/databricks-dolly-15k.jsonl

"""Preprocess the data. This tutorial uses a subset of 1000 training examples to execute the notebook faster. Consider using more training data for higher quality fine-tuning."""

import json
data = []
with open("databricks-dolly-15k.jsonl") as file:
    for line in file:
        features = json.loads(line)
        # Filter out examples with context, to keep it simple.
        if features["context"]:
            continue
        # Format the entire example as a single string.
        template = "Instruction:\n{instruction}\n\nResponse:\n{response}"
        data.append(template.format(**features))

# Only use 1000 training examples, to keep it fast.
data = data[:1000]

"""# Create a model
KerasNLP provides implementations of many popular [model architectures](https://colab.research.google.com/corgiredirector?site=https%3A%2F%2Fkeras.io%2Fapi%2Fkeras_nlp%2Fmodels%2F). In this tutorial, you'll create a model using GemmaCausalLM, an end-to-end Gemma model for causal language modeling. A causal language model predicts the next token based on previous tokens.

Create the model using the from_preset method:
"""

gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset("gemma_2b_en")

"""from_preset instantiates the model from a preset architecture and weights. In the code above, the string "gemma_2b_en" specifies the preset architecture: a Gemma model with 2 billion parameters.

Note: A Gemma model with 7 billion parameters is also available. To run the larger model in Colab, you need access to the premium GPUs available in paid plans. Alternatively, you can perform [distributed tuning on a Gemma 7B model](https://colab.research.google.com/corgiredirector?site=https%3A%2F%2Fai.google.dev%2Fgemma%2Fdocs%2Fdistributed_tuning) on Kaggle or Google Cloud.

Use summary to get more info about the model:
"""

gemma_lm.summary()

"""As you can see from the summary, the model has 2.5 billion trainable parameters.

Note: For purposes of naming the model ("2B"), the embedding layer is not counted against the number of parameters.

# Inference before fine tuning
In this section, you will query the model with various prompts to see how it responds.

# Selenium Latest Updates in Python Prompt
Query the model to learn about Selenium Test Automation Framework
"""

def get_prompt(query:str)->str:
    template = "Instruction:\n{instruction}\n\nResponse:\n{response}"
    prompt = template.format(
        instruction=query,
        response="",
    )
    return prompt
sampler = keras_nlp.samplers.TopKSampler(k=5, seed=2)
gemma_lm.compile(sampler=sampler)

prompt = get_prompt("What are latest updates of seleniun in Python?")
print(gemma_lm.generate(prompt, max_length=512))

"""# LoRA Fine-tuning
To get better responses from the model, fine-tune the model with Low Rank Adaptation (LoRA) using the Databricks Dolly 15k dataset.

The LoRA rank determines the dimensionality of the trainable matrices that are added to the original weights of the LLM. It controls the expressiveness and precision of the fine-tuning adjustments.

A higher rank means more detailed changes are possible, but also means more trainable parameters. A lower rank means less computational overhead, but potentially less precise adaptation.

This tutorial uses a LoRA rank of 4. In practice, begin with a relatively small rank (such as 4, 8, 16). This is computationally efficient for experimentation. Train your model with this rank and evaluate the performance improvement on your task. Gradually increase the rank in subsequent trials and see if that further boosts performance.
"""

# Enable LoRA for the model and set the LoRA rank to 4.
gemma_lm.backbone.enable_lora(rank=4)
gemma_lm.summary()

"""Note that enabling LoRA reduces the number of trainable parameters significantly (from 2.5 billion to 1.3 million)."""

# Limit the input sequence length to 512 (to control memory usage).
gemma_lm.preprocessor.sequence_length = 512
# Use AdamW (a common optimizer for transformer models).
optimizer = keras.optimizers.AdamW(
    learning_rate=5e-5,
    weight_decay=0.01,
)
# Exclude layernorm and bias terms from decay.
optimizer.exclude_from_weight_decay(var_names=["bias", "scale"])

gemma_lm.compile(
    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer=optimizer,
    weighted_metrics=[keras.metrics.SparseCategoricalAccuracy()],
)
gemma_lm.fit(data,epochs=1, batch_size=1)

"""# Inference after fine-tuning
After fine-tuning, responses follow the instruction provided in the prompt.

# Selenium Latest Updates in Python Prompt
"""

prompt = get_prompt("What are latest updates of seleniun in Python?")
sampler = keras_nlp.samplers.TopKSampler(k=5, seed=2)
gemma_lm.compile(sampler=sampler)
print(gemma_lm.generate(prompt, max_length=256))

prompt = get_prompt("What are the differences between the new API and the previous Selenium WebDriver API?")
sampler = keras_nlp.samplers.TopKSampler(k=5, seed=2)
gemma_lm.compile(sampler=sampler)
print(gemma_lm.generate(prompt, max_length=256))

prompt = get_prompt("What are the new features in the Selenium Client API?")
sampler = keras_nlp.samplers.TopKSampler(k=5, seed=2)
gemma_lm.compile(sampler=sampler)
print(gemma_lm.generate(prompt, max_length=256))